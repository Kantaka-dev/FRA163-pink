import sys
import pygame as pg
from pygame import *

class Rec:
    def __init__(self,x=0,y=0,w=0,h=0,color=(0,0,0)):
        self.x = x # Position X
        self.y = y # Position Y
        self.w = w # Width
        self.h = h # Height
        self.color = color
    def draw(self,screen):
        pg.draw.rect(screen,self.color,(self.x,self.y,self.w,self.h))

        # pg.draw.rect(screen,(120,20,220),(self.x,self.y,self.w,self.h))

class RoundedRec():
    def __init__(self,surface, x=0, y=0, w=0, h=0, color = (0,0,0), radius = 0): 
        self.x       = x
        self.y       = y
        self.w       = w
        self.h       = h
        self.rect    = pg.Rect(self.x, self.y, self.w, self.h)        #
        self.radius  = radius #radius  : 0 <= radius <= 1
        self.color   = pg.Color(*color)    #
        alpha        = self.color.a          #
        self.color.a = 0                #
        self.pos     = self.rect.topleft     #
        self.rect.topleft = 0,0    #
        self.rectangle    = Surface((self.rect.size),SRCALPHA)
        # ทำขอบวงกลม 4 จุด
        circle       = Surface([min(self.rect.size)*3]*2,SRCALPHA)
        draw.ellipse(circle,(0,0,0),circle.get_rect(),0)    # เติมขอบมน
        circle       = transform.smoothscale(circle,[int(min(self.rect.size)*self.radius)]*2)     #ทำให้เนียนไปกับ 4 เหลี่ยม

        self.radius              = self.rectangle.blit(circle,(0,0))
        self.radius.bottomright  = self.rect.bottomright
        self.rectangle.blit(circle,self.radius)
        self.radius.topright     = self.rect.topright
        self.rectangle.blit(circle,self.radius)
        self.radius.bottomleft   = self.rect.bottomleft
        self.rectangle.blit(circle,self.radius)

        self.rectangle.fill((0,0,0),self.rect.inflate(-self.radius.w,0))   #ลากเส้นเชื่อมต่อแนวกว้าง
        self.rectangle.fill((0,0,0),self.rect.inflate(0,-self.radius.h))   #ลากเส้นเชื่อมต่อแนวยาว

        self.rectangle.fill(self.color,special_flags=BLEND_RGBA_MAX)
        self.rectangle.fill((255,255,255,alpha),special_flags=BLEND_RGBA_MIN)
        # print(self.x)

    def draw(self,surface):
        return surface.blit(self.rectangle,self.pos)


class Button(RoundedRec):
    def __init__(self,surface, x=0, y=0, w=0, h=0, color = (0,0,0), radius = 0):
        RoundedRec.__init__(self,surface, x, y, w, h, color, radius)
        # print(self.x)
    
    def isMouseOn(self):
        mousePos = pg.mouse.get_pos()
        # return (self.x <= mousePos[0] <= self.x + self.w) and (self.y <= mousePos[1] <= self.y + self.h)

    def isMousePressed(self):
        state = pg.mouse.get_pressed()[0]
        # print(state)
        return state
# Text
# /- init (pos(left,top),Font,fontSize,fontColor(Red,Green,Blue),text,backColor(Red,Green,Blue))
class Text:
    def __init__(self, x=0, y=0,font='freesansbold.ttf', fontSize=26, fontColor=(0,0,0), message='', backColor=(255,255,255)):
        self.font = pg.font.Font(font, fontSize) # fontand fontsize
        self.text = self.font.render(message, True, fontColor, backColor) # (text,is smooth?,letter color,background color)
        self.textRect = self.text.get_rect() # text size
        self.textRect.center = (x, y)

    def change(self, x=0, y=0,font='freesansbold.ttf', fontSize=26, fontColor=(0,0,0), message='', backColor=(255,255,255)):
        self.font = pg.font.Font(font, fontSize) # fontand fontsize
        self.text = self.font.render(message, True, fontColor, backColor) # (text,is smooth?,letter color,background color)
        self.textRect = self.text.get_rect() # text size
        self.textRect.center = (x, y)

class InputBox:

    def __init__(self, x, y, w, h, MI = 0, text1=''):
        self.rect = pg.Rect(x, y, w, h)
        self.color = COLOR_INACTIVE
        self.text1 = text1
        self.txt_surface = FONT.render(text1, True, self.color)
        self.active = False
        self.MI=MI

    def handle_event(self, event):
        
        if event.type == pg.MOUSEBUTTONDOWN:# ทำการเช็คว่ามีการคลิก Mouse หรือไม่
            if self.rect.collidepoint(event.pos): #ทำการเช็คว่าตำแหน่งของ Mouse อยู่บน InputBox นี้หรือไม่
                # Toggle the active variable.
                self.active = not self.active
            else:
                self.active = False
            self.color = COLOR_ACTIVE if self.active else COLOR_INACTIVE # เปลี่ยนสีของ InputBox
            
        if event.type == pg.KEYDOWN:
            if self.active:
                if event.key == pg.K_RETURN:
                    print(self.text1)
                    self.text1 = ''
                elif event.key == pg.K_BACKSPACE:
                    self.text1 = self.text1[:-1]
                else:
                    self.text1 += event.unicode

                # Re-render the text1.
                self.txt_surface = FONT.render(self.text1, True, self.color)
            
    def update(self):
        # Resize the box if the text1 is too long.
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width
